==========================
Qthreads README for Chapel
==========================

This copy of Qthreads 1.22 is being released with Chapel for
convenience and was obtained from:

  https://github.com/sandialabs/qthreads

Any Chapel issues that seem to be related to Qthreads should be directed
to the Chapel team at https://chapel-lang.org/bugs.html.


Upgrading versions
============================

The directory $CHPL_HOME/third-party/qthread/qthread-src contains
a copy of the Qthreads repository. Version updates should be done
as follows, assuming the CWD is $CHPL_HOME/third-party/qthread/:

1. download the latest qthread version: e.g. `wget https://github.com/sandialabs/qthreads/archive/refs/tags/1.22.tar.gz -O qthread-src.tar.gz`
2. `git rm -r qthread-src`
3. `tar xf qthread-src.tar.gz`
4. `git add --force qthread-src` (--force to ignore our .gitignore)
5. update the version number mentioned above
6. test
7. commit, PR, merge, etc

The modifications that we have made to the official Qthreads release are
as follows:

Route HWLOC_GET_TOPOLOGY_FUNCTION option properly to the relevant source files.
This fixes a minor performance regression in the startup time.
--- a/src/affinity/binders.c
+++ b/src/affinity/binders.c
@@ -87,6 +87,10 @@ static int qt_affinity_compact(int num_workers, hwloc_obj_t obj) {
 void INTERNAL qt_affinity_init(qthread_shepherd_id_t *nbshepherds,
                                qthread_worker_id_t *nbworkers,
                                size_t *hw_par) {
+#ifdef HWLOC_GET_TOPOLOGY_FUNCTION
+  extern void *HWLOC_GET_TOPOLOGY_FUNCTION;
+  topology = (hwloc_topology_t)HWLOC_GET_TOPOLOGY_FUNCTION;
+#endif
   // Note: the lack of a teardown routine will cause topology initialization
   // to be skipped if qthreads is re-initialized
   if (topology == NULL) {
diff --git a/src/affinity/hwloc.c b/src/affinity/hwloc.c
index eb8ac5b1..ea03ed6d 100644
--- a/src/affinity/hwloc.c
+++ b/src/affinity/hwloc.c
@@ -86,6 +86,10 @@ void INTERNAL qt_affinity_init(qthread_shepherd_id_t *nbshepherds,
                                qthread_worker_id_t *nbworkers,
                                size_t *hw_par) {
   if (qthread_cas(&initialized, 0, 1) == 0) {
+#ifdef HWLOC_GET_TOPOLOGY_FUNCTION
+    extern void *HWLOC_GET_TOPOLOGY_FUNCTION;
+    topology = (hwloc_topology_t)HWLOC_GET_TOPOLOGY_FUNCTION;
+#endif
     if (topology == NULL) {
       qassert(hwloc_topology_init(&topology), 0);
       qassert(hwloc_topology_load(topology), 0);

