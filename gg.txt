chplvis/benchmarks-hpcc/fft-vdb.chpl:use BitOps, Math, NPBRandom, Time, BlockDist, CyclicDist;
chplvis/benchmarks-hpcc/hpl-vdb.chpl:use LinearAlgebra, NPBRandom, Time;
constrained-generics/random/MyRandom.chpl:     * :mod:`NPBRandom`
constrained-generics/random/MyRandom.chpl:  public use NPBRandom;
constrained-generics/random/MyRandom.chpl:     See :mod:`PCGRandom` and :mod:`NPBRandom` for details on
constrained-generics/random/MyRandom.chpl:                                               else NPBRandomStream;
constrained-generics/random/MyRandom.chpl:      :mod:`NPBRandom` only supports `real(64)`, `imag(64)`, and `complex(128)`
constrained-generics/random/MyRandom.chpl:      The :mod:`NPBRandom` RNG will halt if provided an even seed.
constrained-generics/random/MyRandom.chpl:      return new owned NPBRandomStream(seed=seed,
constrained-generics/random/MyRandom.chpl:    :mod:`PCGRandom` and :mod:`NPBRandom` for RNGs that can be
constrained-generics/random/MyRandom.chpl:      generated by :mod:`PCGRandom` but not by :mod:`NPBRandom`).
constrained-generics/random/MyRandom.chpl:  module NPBRandom {
constrained-generics/random/MyRandom.chpl:      notes for :mod:`NPBRandom` for details on the PRNG used.
constrained-generics/random/MyRandom.chpl:    class NPBRandomStream : writeSerializable {
constrained-generics/random/MyRandom.chpl:        Specifies the type of value generated by the NPBRandomStream.
constrained-generics/random/MyRandom.chpl:        Indicates whether or not the NPBRandomStream needs to be
constrained-generics/random/MyRandom.chpl:          an NPBRandomStream with an even seed value will cause a call to
constrained-generics/random/MyRandom.chpl:          HaltWrappers.initHalt("NPBRandomStream seed must be an odd integer");
constrained-generics/random/MyRandom.chpl:          HaltWrappers.initHalt("NPBRandomStream seed must be an odd integer between 0 and 2**46");
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_cursor = seed;
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_count = 1;
constrained-generics/random/MyRandom.chpl:          compilerError("NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)");
constrained-generics/random/MyRandom.chpl:      proc NPBRandomStreamPrivate_getNext_noLock() {
constrained-generics/random/MyRandom.chpl:          NPBRandomStreamPrivate_count += 2;
constrained-generics/random/MyRandom.chpl:          NPBRandomStreamPrivate_count += 1;
constrained-generics/random/MyRandom.chpl:        return randlc(eltType, NPBRandomStreamPrivate_cursor);
constrained-generics/random/MyRandom.chpl:      proc NPBRandomStreamPrivate_skipToNth_noLock(in n: integral) {
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_count = n;
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_cursor = randlc_skipto(seed, n);
constrained-generics/random/MyRandom.chpl:        const result = NPBRandomStreamPrivate_getNext_noLock();
constrained-generics/random/MyRandom.chpl:          throw new owned IllegalArgumentError("NPBRandomStream.skipToNth(n) called with negative 'n' value " + n:string);
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_skipToNth_noLock(n);
constrained-generics/random/MyRandom.chpl:          throw new owned IllegalArgumentError("NPBRandomStream.getNth(n) called with negative 'n' value " + n:string);
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_skipToNth_noLock(n);
constrained-generics/random/MyRandom.chpl:        const result = NPBRandomStreamPrivate_getNext_noLock();
constrained-generics/random/MyRandom.chpl:        :class:`NPBRandomStream` object on which it's invoked rather
constrained-generics/random/MyRandom.chpl:        compilerError("NPBRandomStream(eltType=", eltType:string,
constrained-generics/random/MyRandom.chpl:        compilerError("NPBRandomStream.choice() is not supported.");
constrained-generics/random/MyRandom.chpl:        compilerError("NPBRandomStream.choice() is not supported.");
constrained-generics/random/MyRandom.chpl:        compilerError("NPBRandomStream.choice() is not supported.");
constrained-generics/random/MyRandom.chpl:        const start = NPBRandomStreamPrivate_count;
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_count += D.size.safeCast(int(64));
constrained-generics/random/MyRandom.chpl:        NPBRandomStreamPrivate_skipToNth_noLock(NPBRandomStreamPrivate_count-1);
constrained-generics/random/MyRandom.chpl:        return NPBRandomPrivate_iterate(resultType, D, seed, start);
constrained-generics/random/MyRandom.chpl:        const start = NPBRandomStreamPrivate_count;
constrained-generics/random/MyRandom.chpl:        return NPBRandomPrivate_iterate(resultType, D, seed, start, tag);
constrained-generics/random/MyRandom.chpl:        writer.write("NPBRandomStream(eltType=");
constrained-generics/random/MyRandom.chpl:      var NPBRandomStreamPrivate_cursor: real = seed;
constrained-generics/random/MyRandom.chpl:      var NPBRandomStreamPrivate_count: int(64) = 1;
constrained-generics/random/MyRandom.chpl:    iter NPBRandomPrivate_iterate(type resultType, D: domain(?), seed: int(64),
constrained-generics/random/MyRandom.chpl:    iter NPBRandomPrivate_iterate(type resultType, D: domain(?), seed: int(64),
constrained-generics/random/MyRandom.chpl:    iter NPBRandomPrivate_iterate(type resultType, D: domain(?), seed: int(64),
constrained-generics/random/MyRandom.chpl:  } // close module NPBRandom
deprecated/random/direct_rand_classes.chpl:use Random, Random.NPBRandom, Random.PCGRandom;
deprecated/random/direct_rand_classes.chpl:var npb = new owned NPBRandomStream(real, 123),
deprecated/random/generic_algorithm/randomAcrossTypes.1-0.good:randomAcrossTypes.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/randomAcrossTypes.1-0.good:randomAcrossTypes.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/randomAcrossTypes.2-0.good:randomAcrossTypes.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/randomAcrossTypes.2-0.good:randomAcrossTypes.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth.1-0.good:testGetNth.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth.1-0.good:testGetNth.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth.2-0.good:testGetNth.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth.2-0.good:testGetNth.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth2.1-0.good:testGetNth2.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth2.1-0.good:testGetNth2.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth2.2-0.good:testGetNth2.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testGetNth2.2-0.good:testGetNth2.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testRandomSeed.1-0.good:testRandomSeed.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testRandomSeed.1-0.good:testRandomSeed.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testRandomSeed.2-0.good:testRandomSeed.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/generic_algorithm/testRandomSeed.2-0.good:testRandomSeed.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/npb-rand-check.good:npb-rand-check.chpl:5: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:17: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:45: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:73: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:103: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:136: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:204: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:240: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
deprecated/random/pcg-rand-check.good:pcg-rand-check.chpl:247: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
gpu/native/streamPrototype/stream.chpl:use Time, Types /*, NPBRandom */;
gpu/native/streamPrototype/stream.chpl:  var randlist = new NPBRandomStream(eltType=real, seed=seed);
gpu/native/studies/sort/sortTest.chpl:config const seed = Random.NPBRandom.oddTimeSeed();
library/packages/Sort/correctness/test-radix-bucketizer.chpl:config var seed = NPBRandom.oddTimeSeed();
library/packages/Sort/performance/sort-performance-explorer.chpl:config const seed = NPBRandom.oddTimeSeed();
modules/bradc/printModStuff/foo.good:  $CHPL_HOME/modules/packages/NPBRandom.chpl
npb/cg/bradc/cg-makea-commented.chpl:    var randStr = new NPBRandomStream(314159265);
npb/cg/bradc/cg-makea.chpl:  use NPBRandom, Sort;
npb/cg/bradc/cg-makea.chpl:    var randStr = new NPBRandomStream(eltType=real, seed=314159265);
npb/cg/bradc/cg.chpl:  var randStr = new NPBRandomStream(real, 314159265);
npb/ep/mcahir/ep.chpl:use NPBRandom, Time, BlockDist, ReplicatedDist;
npb/ep/mcahir/ep.chpl:	var rs = new NPBRandomStream(real, seed=seed, parSafe=false);
npb/ft/npadmana/ft_transposed.chpl:  use NPBRandom;
npb/is/diten/is.chpl:use NPBRandom;
npb/is/diten/is.chpl:  var randomStream = new owned NPBRandomStream(real, seed);
npb/is/diten/is_mt.chpl:use NPBRandom;
npb/is/diten/is_mt.chpl:  var randomStream = new owned NPBRandomStream(real, seed);
npb/is/diten/is_no_buckets.chpl:use NPBRandom;
npb/is/diten/is_no_buckets.chpl:  var randomStream = new owned NPBRandomStream(real, seed);
npb/is/mcahir/intsort.mtml.chpl:use Time, NPBRandom, BlockDist, BlockCycDist;
npb/is/mcahir/intsort.mtml.chpl:      var rs = new owned NPBRandomStream(real, seed);
reductions/thomasvandoren/test/Common.chpl:config const randSeed = NPBRandom.oddTimeSeed();
separate_compilation/serialization/bug/MyMod.chpl:use NPBRandom;
separate_compilation/serialization/bug/testGenLib.future:bug: using the NPBRandom and Set modules causes an internal compiler error when generating a library
separate_compilation/serialization/testGenLib.MyMod.good:2 { fileTextQuery ("$CHPL_HOME/modules/packages/NPBRandom.chpl") 
separate_compilation/serialization/testGenLib.OtherMod.good:2 { fileTextQuery ("$CHPL_HOME/modules/packages/NPBRandom.chpl") 
separate_compilation/serialization/testGenLib.both.good:2 { fileTextQuery ("$CHPL_HOME/modules/packages/NPBRandom.chpl") 
studies/bale/histogram/histo-atomics.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 314159265;
studies/bale/indexgather/ig.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 314159265;
studies/bale/toposort/toposort.chpl:config const seed : int = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi1D-DiamondByHand-Chapel_dyn.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi1D-DiamondByHand-Chapel_static.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi1D-NaiveParallel-Chapel_static.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi2D-DiamondByHandParam-Chapel_dyn.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi2D-DiamondByHandParam-Chapel_static.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi2D-NaiveParallel-Chapel_dyn.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/colostate/Jacobi2D-NaiveParallel-Chapel_static.chpl:config const globalSeed = NPBRandom.oddTimeSeed();
studies/hpcc/HPL/vass/bc.dim.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/hpcc/HPL/vass/bc.md.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/hpcc/HPL/vass/bl.dim.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/hpcc/HPL/vass/bl.md.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/hpcc/HPL/vass/bug.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/hpcc/HPL/vass/hpl.chpl:             seed = if useRandomSeed then NPBRandom.oddTimeSeed() else 31415;
studies/labelprop/labelprop-tweets.chpl:    seed = NPBRandom.oddTimeSeed();
studies/ml/lib/Tensor.chpl:    import NPBRandom;
studies/ml/lib/Tensor.chpl:    var rng = new NPBRandom.NPBRandomStream(eltType=real(64),seed=5);
studies/ml/lib/Tensor.chpl:        rng = new NPBRandom.NPBRandomStream(eltType=real(64),seed=(2 * seed + 1));
studies/ssca2/graphio/SSCA2_RMAT_graph_generator.chpl:  { use NPBRandom;
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:{ use NPBRandom, IO;
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos+0*delta),
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos+1*delta),
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos+2*delta),
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos+3*delta),
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos+4*delta)) {
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:      NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos-1))
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:          NPBRandomPrivate_iterate(real, edge_domain, seed, start=rndPos-1)) with (ref permutationSync)
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:        NPBRandomPrivate_iterate(real, vertex_domain, seed, start=rndPos-1))
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:                     new NPBRandomStream (real, seed = 0556707007)
studies/ssca2/main/SSCA2_Modules/SSCA2_RMAT_graph_generator.chpl:                     new NPBRandomStream (real);
studies/ssca2/main/SSCA2_Modules/SSCA2_driver.chpl:          NPBRandom;
studies/ssca2/main/SSCA2_Modules/SSCA2_driver.chpl:                             new unmanaged NPBRandomStream (real, seed = 3217900597)
studies/ssca2/main/SSCA2_Modules/SSCA2_driver.chpl:                             new unmanaged NPBRandomStream (real);
studies/ssca2/main/SSCA2_Modules/torus_graph_generator_utilities.chpl:    use SSCA2_compilation_config_params, NPBRandom;
studies/ssca2/main/SSCA2_Modules/torus_graph_generator_utilities.chpl:                     new unmanaged NPBRandomStream (seed = 8737935341)
studies/ssca2/main/SSCA2_Modules/torus_graph_generator_utilities.chpl:		      new unmanaged NPBRandomStream ();
