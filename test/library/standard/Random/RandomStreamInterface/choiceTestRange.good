choiceTestRange.chpl:3: In function 'main':
choiceTestRange.chpl:4: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
choiceTestRange.chpl:6: warning: 'RNG' is deprecated; please use the PCG algorithm via the randomStream type or the NPB algorithm via the NPBRandom package module
choiceTestRange.chpl:4: warning: 'createRandomStream' is deprecated; please use 'new randomStream' instead
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:18: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:29: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:21: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:29: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:22: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:31: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:32: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:33: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from function 'test'
  choiceTestRange.chpl:37: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:39: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from function 'test'
  choiceTestRange.chpl:41: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from function 'test'
  choiceTestRange.chpl:43: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(real(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(real(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(real(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from function 'test'
  choiceTestRange.chpl:45: called as test(stream: owned PCGRandomStreamInternal(real(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:5: called as runTests(stream: owned PCGRandomStreamInternal(real(64),true))
choiceTestRange.chpl:3: In function 'main':
choiceTestRange.chpl:6: warning: 'createRandomStream' is deprecated; please use 'new randomStream' instead
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:18: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,positive), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:29: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:21: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:29: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:22: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: nothing, replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:31: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: domain(1,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:32: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: domain(2,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64)) from function 'test'
  choiceTestRange.chpl:33: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: domain(3,int(64),one), replace: bool, prob: [domain(1,int(64),one)] real(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32)) from function 'test'
  choiceTestRange.chpl:37: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] real(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64)) from function 'test'
  choiceTestRange.chpl:39: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(64), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32)) from function 'test'
  choiceTestRange.chpl:41: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] int(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32)) from function 'test'
  choiceTestRange.chpl:43: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(32), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
$CHPL_HOME/modules/standard/Random.chpl:nnnn: In function '_choiceProbabilities':
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
$CHPL_HOME/modules/standard/Random.chpl:nnnn: warning: scan has been serialized (see issue #12482)
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choiceProbabilities(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from function '_choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as _choice(stream: PCGImpl(int(64)), X: domain(1,int(64),one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from method 'choice'
  $CHPL_HOME/modules/standard/Random.chpl:nnnn: called as (PCGImpl(int(64))).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from method 'choice'
  choiceTestUtils.chpl:34: called as (PCGRandomStreamInternal(int(64),true)).choice(x: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16)) from function 'test'
  choiceTestRange.chpl:45: called as test(stream: owned PCGRandomStreamInternal(int(64),true), X: range(int(64),both,one), size: int(64), replace: bool, prob: [domain(1,int(64),one)] uint(16), trials: int(64)) from function 'runTests'
  choiceTestRange.chpl:7: called as runTests(stream: owned PCGRandomStreamInternal(int(64),true))
