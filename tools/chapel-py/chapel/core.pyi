from typing import Any, Tuple, Union

class AggregateDecl(TypeDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def decls_or_comments(self, *args, **kwargs) -> Any: ...

class AnonFormal(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def intent(self, *args, **kwargs) -> Any: ...
    def type_expression(self, *args, **kwargs) -> Any: ...

class Array(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def exprs(self, *args, **kwargs) -> Any: ...
    def has_trailing_comma(self, *args, **kwargs) -> Any: ...
    def is_associative(self, *args, **kwargs) -> Any: ...

class As(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class AstNode:
    def __init__(self, *args, **kwargs) -> None: ...
    def attribute_group(self, *args, **kwargs) -> Any: ...
    def dump(self, *args, **kwargs) -> Any: ...
    def location(self, *args, **kwargs) -> Any: ...
    def parent(self, *args, **kwargs) -> Any: ...
    def tag(self, *args, **kwargs) -> Any: ...
    def unique_id(self, *args, **kwargs) -> Any: ...
    def __iter__(self) -> Any: ...

class Attribute(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def actuals(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...

class AttributeGroup(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def is_unstable(self, *args, **kwargs) -> Any: ...

class Begin(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...
    def with_clause(self, *args, **kwargs) -> Any: ...

class Block(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...

class BoolLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def value(self, *args, **kwargs) -> Any: ...

class BracketLoop(IndexableLoop):
    def __init__(self, *args, **kwargs) -> None: ...
    def is_maybe_array_type(self, *args, **kwargs) -> Any: ...

class Break(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def target(self, *args, **kwargs) -> Any: ...

class BytesLiteral(StringLikeLiteral):
    def __init__(self, *args, **kwargs) -> None: ...

class CStringLiteral(StringLikeLiteral):
    def __init__(self, *args, **kwargs) -> None: ...

class Call(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def actuals(self, *args, **kwargs) -> Any: ...
    def called_expression(self, *args, **kwargs) -> Any: ...

class Catch(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Class(AggregateDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def inherit_exprs(self, *args, **kwargs) -> Any: ...

class Cobegin(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Coforall(IndexableLoop):
    def __init__(self, *args, **kwargs) -> None: ...

class Comment(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def text(self, *args, **kwargs) -> Any: ...

class Conditional(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def condition(self, *args, **kwargs) -> Any: ...
    def else_block(self, *args, **kwargs) -> Any: ...
    def is_expression_level(self, *args, **kwargs) -> Any: ...
    def then_block(self, *args, **kwargs) -> Any: ...

class Context:
    def __init__(self, *args, **kwargs) -> None: ...
    def is_bundled_path(self, *args, **kwargs) -> Any: ...
    def parse(self, *args, **kwargs) -> Any: ...

class Continue(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def target(self, *args, **kwargs) -> Any: ...

class Decl(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def linkage(self, *args, **kwargs) -> Any: ...
    def linkage_name(self, *args, **kwargs) -> Any: ...
    def visibility(self, *args, **kwargs) -> Any: ...

class Defer(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...

class Delete(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def exprs(self, *args, **kwargs) -> Any: ...

class DoWhile(Loop):
    def __init__(self, *args, **kwargs) -> None: ...
    def condition(self, *args, **kwargs) -> Any: ...

class Domain(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def exprs(self, *args, **kwargs) -> Any: ...
    def used_curly_braces(self, *args, **kwargs) -> Any: ...

class Dot(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def field(self, *args, **kwargs) -> Any: ...
    def receiver(self, *args, **kwargs) -> Any: ...

class EmptyStmt(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Enum(TypeDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class EnumElement(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def init_expression(self, *args, **kwargs) -> Any: ...

class ErroneousExpression(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class ExternBlock(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class FnCall(Call):
    def __init__(self, *args, **kwargs) -> None: ...
    def actuals(self, *args, **kwargs) -> Any: ...
    def used_square_brackets(self, *args, **kwargs) -> Any: ...

class For(IndexableLoop):
    def __init__(self, *args, **kwargs) -> None: ...
    def is_param(self, *args, **kwargs) -> Any: ...

class Forall(IndexableLoop):
    def __init__(self, *args, **kwargs) -> None: ...

class Foreach(IndexableLoop):
    def __init__(self, *args, **kwargs) -> None: ...

class Formal(VarLikeDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def intent(self, *args, **kwargs) -> Any: ...

class ForwardingDecl(Decl):
    def __init__(self, *args, **kwargs) -> None: ...

class Function(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def body(self, *args, **kwargs) -> Any: ...
    def formals(self, *args, **kwargs) -> Any: ...
    def is_anonymous(self, *args, **kwargs) -> Any: ...
    def is_inline(self, *args, **kwargs) -> Any: ...
    def is_method(self, *args, **kwargs) -> Any: ...
    def is_override(self, *args, **kwargs) -> Any: ...
    def is_parenless(self, *args, **kwargs) -> Any: ...
    def is_primary_method(self, *args, **kwargs) -> Any: ...
    def kind(self, *args, **kwargs) -> Any: ...
    def lifetime_clauses(self, *args, **kwargs) -> Any: ...
    def return_intent(self, *args, **kwargs) -> Any: ...
    def return_type(self, *args, **kwargs) -> Any: ...
    def this_formal(self, *args, **kwargs) -> Any: ...
    def throws(self, *args, **kwargs) -> Any: ...
    def where_clause(self, *args, **kwargs) -> Any: ...

class FunctionSignature(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def formals(self, *args, **kwargs) -> Any: ...
    def is_parenless(self, *args, **kwargs) -> Any: ...
    def kind(self, *args, **kwargs) -> Any: ...
    def return_intent(self, *args, **kwargs) -> Any: ...
    def return_type(self, *args, **kwargs) -> Any: ...
    def this_formal(self, *args, **kwargs) -> Any: ...
    def throws(self, *args, **kwargs) -> Any: ...

class Identifier(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def name(self, *args, **kwargs) -> Any: ...

class ImagLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def text(self, *args, **kwargs) -> Any: ...

class Implements(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Import(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Include(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class IndexableLoop(Loop):
    def __init__(self, *args, **kwargs) -> None: ...
    def index(self, *args, **kwargs) -> Any: ...
    def is_expression_level(self, *args, **kwargs) -> Any: ...
    def iterand(self, *args, **kwargs) -> Any: ...
    def with_clause(self, *args, **kwargs) -> Any: ...

class Init(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def target(self, *args, **kwargs) -> Any: ...

class IntLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def text(self, *args, **kwargs) -> Any: ...

class Interface(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class Label(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def loop(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...

class Let(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Literal(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Local(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...
    def condition(self, *args, **kwargs) -> Any: ...

class Loop(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def block_style(self, *args, **kwargs) -> Any: ...
    def body(self, *args, **kwargs) -> Any: ...

class Manage(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...

class Module(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def kind(self, *args, **kwargs) -> Any: ...

class MultiDecl(Decl):
    def __init__(self, *args, **kwargs) -> None: ...

class NamedDecl(Decl):
    def __init__(self, *args, **kwargs) -> None: ...
    def name(self, *args, **kwargs) -> Any: ...

class New(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def management(self, *args, **kwargs) -> Any: ...
    def type_expression(self, *args, **kwargs) -> Any: ...

class On(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...
    def destination(self, *args, **kwargs) -> Any: ...

class OpCall(Call):
    def __init__(self, *args, **kwargs) -> None: ...
    def is_binary_op(self, *args, **kwargs) -> Any: ...
    def is_unary_op(self, *args, **kwargs) -> Any: ...
    def op(self, *args, **kwargs) -> Any: ...

class PrimCall(Call):
    def __init__(self, *args, **kwargs) -> None: ...

class Range(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def lower_bound(self, *args, **kwargs) -> Any: ...
    def op_kind(self, *args, **kwargs) -> Any: ...
    def upper_bound(self, *args, **kwargs) -> Any: ...

class RealLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def text(self, *args, **kwargs) -> Any: ...

class Record(AggregateDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def interface_exprs(self, *args, **kwargs) -> Any: ...

class Reduce(Call):
    def __init__(self, *args, **kwargs) -> None: ...
    def iterand(self, *args, **kwargs) -> Any: ...
    def op(self, *args, **kwargs) -> Any: ...

class ReduceIntent(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def op(self, *args, **kwargs) -> Any: ...

class Require(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Return(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def value(self, *args, **kwargs) -> Any: ...

class Scan(Call):
    def __init__(self, *args, **kwargs) -> None: ...

class Select(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Serial(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...
    def condition(self, *args, **kwargs) -> Any: ...

class SimpleBlockLike(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def block_style(self, *args, **kwargs) -> Any: ...

class StringLikeLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def value(self, *args, **kwargs) -> Any: ...

class StringLiteral(StringLikeLiteral):
    def __init__(self, *args, **kwargs) -> None: ...

class Sync(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...

class TaskVar(VarLikeDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def intent(self, *args, **kwargs) -> Any: ...

class Throw(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def error_expression(self, *args, **kwargs) -> Any: ...

class Try(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class Tuple(Call):
    def __init__(self, *args, **kwargs) -> None: ...

class TupleDecl(Decl):
    def __init__(self, *args, **kwargs) -> None: ...
    def decls(self, *args, **kwargs) -> Any: ...
    def init_expression(self, *args, **kwargs) -> Any: ...
    def intent_or_kind(self, *args, **kwargs) -> Any: ...
    def type_expression(self, *args, **kwargs) -> Any: ...

class TypeDecl(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class TypeQuery(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class UintLiteral(Literal):
    def __init__(self, *args, **kwargs) -> None: ...
    def text(self, *args, **kwargs) -> Any: ...

class Union(AggregateDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class Use(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...

class VarArgFormal(VarLikeDecl):
    def __init__(self, *args, **kwargs) -> None: ...

class VarLikeDecl(NamedDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def init_expression(self, *args, **kwargs) -> Any: ...
    def storage_kind(self, *args, **kwargs) -> Any: ...
    def type_expression(self, *args, **kwargs) -> Any: ...

class Variable(VarLikeDecl):
    def __init__(self, *args, **kwargs) -> None: ...
    def is_config(self, *args, **kwargs) -> Any: ...
    def is_field(self, *args, **kwargs) -> Any: ...
    def kind(self, *args, **kwargs) -> Any: ...

class VisibilityClause(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def symbol(self, *args, **kwargs) -> Any: ...

class When(SimpleBlockLike):
    def __init__(self, *args, **kwargs) -> None: ...

class While(Loop):
    def __init__(self, *args, **kwargs) -> None: ...
    def condition(self, *args, **kwargs) -> Any: ...

class WithClause(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def exprs(self, *args, **kwargs) -> Any: ...

class Yield(AstNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def value(self, *args, **kwargs) -> Any: ...

class Zip(Call):
    def __init__(self, *args, **kwargs) -> None: ...
